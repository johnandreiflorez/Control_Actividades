package gestioninformacionproyectos.View;

import gestioninformacionproyectos.Controller.*;
import gestioninformacionproyectos.Model.*;
import gestioninformacionproyectos.Utils.DateFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author jaflorez
 */
public class ActivitiesXProject_OwmersFrm extends javax.swing.JInternalFrame {

    String consultCodresp;
    int consultCodactiv, consultCodproy;
    
    public ActivitiesXProject_OwmersFrm() {
        initComponents();
        fillComboOwners();
        fillComboActivities();
        fillComboProjects();
        listar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnUpdate = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRelation = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnConsult = new javax.swing.JButton();
        cboOwner = new javax.swing.JComboBox<>();
        cboActivity = new javax.swing.JComboBox<>();
        cboProject = new javax.swing.JComboBox<>();
        jdcAsignationDate = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        txtCode = new javax.swing.JTextField();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("PROGRAMACIÓN Y ASIGNACIÓN");

        btnUpdate.setText("MODIFICAR");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        jLabel5.setText("Fecha de asignación *");

        jLabel1.setText("ACTIVIDADES POR PROYECTO CON RESPONSABLES");

        jLabel2.setText("Responsable *");

        jLabel3.setText("Actividad *");

        tblRelation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblRelation);

        jLabel4.setText("Proyecto *");

        btnDelete.setText("BORRAR");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSave.setText("GUARDAR");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnConsult.setText("CONSULTAR");
        btnConsult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultActionPerformed(evt);
            }
        });

        cboOwner.setBackground(new java.awt.Color(255, 255, 255));

        cboActivity.setBackground(new java.awt.Color(255, 255, 255));

        cboProject.setBackground(new java.awt.Color(255, 255, 255));

        jdcAsignationDate.setDateFormatString("yyyy-MM-dd");

        jLabel6.setText("Código de consulta *");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(214, 214, 214)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 664, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(156, 156, 156)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cboOwner, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cboActivity, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cboProject, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jdcAsignationDate, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                            .addComponent(txtCode, javax.swing.GroupLayout.Alignment.LEADING))))
                .addContainerGap(39, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnSave)
                .addGap(52, 52, 52)
                .addComponent(btnConsult)
                .addGap(32, 32, 32)
                .addComponent(btnUpdate)
                .addGap(56, 56, 56)
                .addComponent(btnDelete)
                .addGap(106, 106, 106))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cboOwner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cboActivity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cboProject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jdcAsignationDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnDelete)
                    .addComponent(btnConsult)
                    .addComponent(btnUpdate))
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        DateFormat dateFormat = new DateFormat();
        String codresp, assignmentDate;
        int codactiv, codproy;
        
        if("".equalsIgnoreCase(txtCode.getText())) {
            JOptionPane.showMessageDialog(null, "Debe de consultar primero la asignación que desea actualizar");
        } else {
            if(jdcAsignationDate.getDate() == null){
                JOptionPane.showMessageDialog(null, "Debe rellenar todos los campos obligatorios");
            } else {
                codresp = cboOwner.getSelectedItem().toString().split("-")[0];
                codactiv = Integer.parseInt(cboActivity.getSelectedItem().toString().split("-")[0]);
                codproy = Integer.parseInt(cboProject.getSelectedItem().toString().split("-")[0]);
                assignmentDate = dateFormat.castDateToString(jdcAsignationDate.getDate());

                Activity activity = new Activity(codactiv, "", "", "");
                ActivityController activityController = new ActivityController(activity);
                activity = activityController.consultActivity();

                Project project = new Project(codproy, "", "", "", 0);
                ProjectController projectController = new ProjectController(project);
                project = projectController.consultProject();

                if(dateFormat.compareTwoDates(activity.getEndDate(), project.getEndDate())) {
                    ActivitiesXProjects_owner apo = new ActivitiesXProjects_owner(codresp, codactiv, codproy, assignmentDate);
                    ActivitiesXProjects_ownerController apoController = new ActivitiesXProjects_ownerController(apo);
                    if(apoController.validate(codresp, codactiv, codproy)) {
                        apoController.updateGestionProyecto(this.consultCodresp, this.consultCodactiv, this.consultCodproy);
                        JOptionPane.showMessageDialog(null, "Actualización exitosa.");
                        txtCode.setText("");
                        cboOwner.setSelectedIndex(0);
                        cboActivity.setSelectedIndex(0);
                        cboProject.setSelectedIndex(0);
                        jdcAsignationDate.setDate(null);
                        this.consultCodactiv = 0;
                        this.consultCodproy = 0;
                        this.consultCodresp = ""; 
                    }else {
                        JOptionPane.showMessageDialog(null, "No puede actualizar una asignación que no ha sido creada");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "ERROR: " + dateFormat.getDateError());
                }
            }
        }
        
        this.listar();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        String codresp;
        int codactiv, codproy;
        
         if("".equalsIgnoreCase(txtCode.getText())) {
            JOptionPane.showMessageDialog(null, "Debe de consultar primero la asignación que desea eliminar");
        } else {
            codresp = cboOwner.getSelectedItem().toString().split("-")[0];
            codactiv = Integer.parseInt(cboActivity.getSelectedItem().toString().split("-")[0]);
            codproy = Integer.parseInt(cboProject.getSelectedItem().toString().split("-")[0]);

            ActivitiesXProjects_owner apo = new ActivitiesXProjects_owner(codresp, codactiv, codproy, "");
            ActivitiesXProjects_ownerController apoController = new ActivitiesXProjects_ownerController(apo);
            if(apoController.validate(codresp, codactiv, codproy)) {
                apoController.deleteGestionProyecto(this.consultCodresp, this.consultCodactiv, this.consultCodproy);
                JOptionPane.showMessageDialog(null, "Se ha eliminado registro exitosamente.");
                txtCode.setText("");
                cboOwner.setSelectedIndex(0);
                cboActivity.setSelectedIndex(0);
                cboProject.setSelectedIndex(0);
                jdcAsignationDate.setDate(null);
                this.consultCodactiv = 0;
                this.consultCodproy = 0;
                this.consultCodresp = ""; 
            }else {
                JOptionPane.showMessageDialog(null, "No puede eliminar una asignación que no ha sido creada");
            }
        }
        this.listar();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        DateFormat dateFormat = new DateFormat();
        String codresp, assignmentDate;
        int codactiv, codproy;
        
        if(jdcAsignationDate.getDate() == null){
            JOptionPane.showMessageDialog(null, "Debe rellenar todos los campos obligatorios");
        } else {
            codresp = cboOwner.getSelectedItem().toString().split("-")[0];
            codactiv = Integer.parseInt(cboActivity.getSelectedItem().toString().split("-")[0]);
            codproy = Integer.parseInt(cboProject.getSelectedItem().toString().split("-")[0]);
            assignmentDate = dateFormat.castDateToString(jdcAsignationDate.getDate());
            
            Activity activity = new Activity(codactiv, "", "", "");
            ActivityController activityController = new ActivityController(activity);
            activity = activityController.consultActivity();
            
            Project project = new Project(codproy, "", "", "", 0);
            ProjectController projectController = new ProjectController(project);
            project = projectController.consultProject();
            
            if(dateFormat.compareTwoDates(activity.getEndDate(), project.getEndDate())) {
                ActivitiesXProjects_owner apo = new ActivitiesXProjects_owner(codresp, codactiv, codproy, assignmentDate);
                ActivitiesXProjects_ownerController apoController = new ActivitiesXProjects_ownerController(apo);
                if(!apoController.validate(codresp, codactiv, codproy)) {
                    apoController.createGestionProyecto();
                    JOptionPane.showMessageDialog(null, "Asignación exitosa.");
                    txtCode.setText("");
                    cboOwner.setSelectedIndex(0);
                    cboActivity.setSelectedIndex(0);
                    cboProject.setSelectedIndex(0);
                    jdcAsignationDate.setDate(null);
                } else {
                    JOptionPane.showMessageDialog(null, "Ya existe una asignación registrada con ese código");
                }
            } else {
                JOptionPane.showMessageDialog(null, "ERROR: " + dateFormat.getDateError());
            }
        }
        this.listar();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnConsultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultActionPerformed
        // TODO add your handling code here:
        DateFormat dateFormat = new DateFormat();
        char[] codes;
        String codresp;
        int codactiv, codproy;
        
        if("".equalsIgnoreCase(txtCode.getText())) {
            JOptionPane.showMessageDialog(null, "Debe copiar el código de la actividad por proyecto que desea consultar, ejemplo: 312");
        } else {
            if(txtCode.getText().length() != 3) {
                JOptionPane.showMessageDialog(null, "El código de la actividad por proyecto es de 3 dígitos, ejemplo: 312");
            } else {
                codes = new char[txtCode.getText().length()];
                for (int i = 0; i < txtCode.getText().length(); i++) { 
                    codes[i] = txtCode.getText().charAt(i);
                }
                codresp = String.valueOf(codes[0]);
                codactiv = Integer.parseInt(String.valueOf(codes[1]));
                codproy = Integer.parseInt(String.valueOf(codes[2]));
                
                ActivitiesXProjects_owner apo = new ActivitiesXProjects_owner();
                ActivitiesXProjects_ownerController apoController = new ActivitiesXProjects_ownerController(apo);
                if(apoController.validate(codresp, codactiv, codproy)){
                   apo = apoController.consultGestionProyecto(codresp, codactiv, codproy);
                   this.consultCodactiv = codactiv;
                   this.consultCodproy = codproy;
                   this.consultCodresp = codresp;
                   txtCode.setText(codresp + codactiv + codproy);
                   cboOwner.setSelectedItem(apo.getCodeOwner() + "-" + apo.getNameOwner());
                   cboActivity.setSelectedItem(apo.getCodeActivity()+ "-" + apo.getNameActiv());
                   cboProject.setSelectedItem(apo.getCodeProject()+ "-" + apo.getNameProy());
                   jdcAsignationDate.setDate(dateFormat.stringToDate(apo.getAssignmentDate()));
                } else {
                    JOptionPane.showMessageDialog(null, "El código de la actividad por proyecto " + txtCode.getText() +
                        " no existe");
                }
            }
        }
    }//GEN-LAST:event_btnConsultActionPerformed
    
    private void fillComboOwners() {
        ActivitiesXProjects_owner apo = new ActivitiesXProjects_owner();
        ActivitiesXProjects_ownerController apoController = new ActivitiesXProjects_ownerController(apo);
        String[] array = apoController.getDataCombo("nombre", "responsable");
        for (int i = 0; i < array.length; i++) {
            cboOwner.addItem(array[i]);
        }
    }
    
    private void fillComboActivities() {
        ActivitiesXProjects_owner apo = new ActivitiesXProjects_owner();
        ActivitiesXProjects_ownerController apoController = new ActivitiesXProjects_ownerController(apo);
        String[] array = apoController.getDataCombo("descripcion", "actividad");
        for (int i = 0; i < array.length; i++) {
            cboActivity.addItem(array[i]);
        }
    }
    
    private void fillComboProjects() {
        ActivitiesXProjects_owner apo = new ActivitiesXProjects_owner();
        ActivitiesXProjects_ownerController apoController = new ActivitiesXProjects_ownerController(apo);
        String[] array = apoController.getDataCombo("titulo", "proyecto");
        for (int i = 0; i < array.length; i++) {
            cboProject.addItem(array[i]);
        }
    }
    
    private void listar(){
        ActivitiesXProjects_owner apo = new ActivitiesXProjects_owner();
        ActivitiesXProjects_ownerController apoController = new ActivitiesXProjects_ownerController(apo);
        String[][] matriz = apoController.consultAllGestionProyecto();
        
        Object objMat[][] = new String[matriz.length][5];
        String vecTit[] = new String[5];
        vecTit[0] = "Código";
        vecTit[1] = "Responsable";
        vecTit[2] = "Actividad";
        vecTit[3] = "Proyecto";
        vecTit[4] = "Fecha Asignación";
        
        for(int i = 0; i < matriz.length; i++){
            objMat[i][0] = matriz[i][0] + matriz[i][2] + matriz[i][4];
            objMat[i][1] = matriz[i][1];
            objMat[i][2] = matriz[i][3];
            objMat[i][3] = matriz[i][5];
            objMat[i][4] = matriz[i][6];
        }
        DefaultTableModel objModelo = new DefaultTableModel(objMat,vecTit);
        tblRelation.setModel(objModelo);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConsult;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cboActivity;
    private javax.swing.JComboBox<String> cboOwner;
    private javax.swing.JComboBox<String> cboProject;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JDateChooser jdcAsignationDate;
    private javax.swing.JTable tblRelation;
    private javax.swing.JTextField txtCode;
    // End of variables declaration//GEN-END:variables

}
