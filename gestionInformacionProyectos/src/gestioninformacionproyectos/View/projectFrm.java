package gestioninformacionproyectos.View;

import gestioninformacionproyectos.Controller.ProjectController;
import gestioninformacionproyectos.Model.Project;
import gestioninformacionproyectos.Utils.DateFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jaflorez
 */
public class projectFrm extends javax.swing.JInternalFrame {

    public projectFrm() {
        initComponents();
        listProjects();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblProjects = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtCost = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        btnConsult = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtTitle = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtCode = new javax.swing.JTextField();
        jdcStartDate = new com.toedter.calendar.JDateChooser();
        jdcEndDate = new com.toedter.calendar.JDateChooser();

        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("PROYECTO");

        tblProjects.setAutoCreateRowSorter(true);
        tblProjects.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tabla", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N
        tblProjects.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblProjects.setCellSelectionEnabled(true);
        jScrollPane1.setViewportView(tblProjects);

        btnSave.setText("GUARDAR");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jLabel3.setText("Código *");

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Fecha de Inicio *");

        btnDelete.setText("BORRAR");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnConsult.setText("CONSULTAR");
        btnConsult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultActionPerformed(evt);
            }
        });

        btnUpdate.setText("MODIFICAR");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        jLabel5.setText("Fecha de Finalización *");

        jLabel6.setText("Costo proyecto *");

        jLabel1.setText("PROYECTO");

        jLabel2.setText("Título *");

        jdcStartDate.setDateFormatString("yyyy-MM-dd");

        jdcEndDate.setDateFormatString("yyyy-MM-dd");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSave)
                .addGap(52, 52, 52)
                .addComponent(btnConsult)
                .addGap(32, 32, 32)
                .addComponent(btnUpdate)
                .addGap(45, 45, 45)
                .addComponent(btnDelete)
                .addGap(170, 170, 170))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(341, 341, 341)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(184, 184, 184)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                            .addComponent(txtCode, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                            .addComponent(txtCost, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                            .addComponent(jdcStartDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jdcEndDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 759, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jdcStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jdcEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(txtCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnDelete)
                    .addComponent(btnConsult)
                    .addComponent(btnUpdate))
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        DateFormat dateFormat = new DateFormat();
        String title, startDate, endDate;
        int code;
        double cost;
        
        if("".equalsIgnoreCase(txtTitle.getText()) || "".equalsIgnoreCase(txtCode.getText()) ||
            jdcStartDate.getDate() == null || jdcEndDate.getDate() == null || "".equalsIgnoreCase(txtCost.getText())){
                JOptionPane.showMessageDialog(null, "Debe rellenar todos los campos obligatorios");
        } else {
            code = Integer.parseInt(txtCode.getText());
            title = txtTitle.getText();
            startDate = dateFormat.castDateToString(jdcStartDate.getDate());
            endDate = dateFormat.castDateToString(jdcEndDate.getDate());
            cost = Double.parseDouble(txtCost.getText());
            if(code <= 0) {
                JOptionPane.showMessageDialog(null, "El código del proyecto no puede ser menor a cero (0)");
            } else  {
                if(dateFormat.compareTwoDates(startDate, endDate)) {
                    Project objProject = new Project(code, title, startDate, endDate, cost);
                    ProjectController objProjectController = new ProjectController(objProject);
                    if(!objProjectController.validateProject(code)) {
                        objProjectController.createProyect();
                        JOptionPane.showMessageDialog(null, "Proyecto creado exitosamente, ya puede asignar el proyecto.");
                        txtCode.setText("");
                        txtTitle.setText("");
                        jdcStartDate.setDate(null);
                        jdcEndDate.setDate(null);
                        txtCost.setText("");
                    } else {
                        JOptionPane.showMessageDialog(null, "Ya existe un proyecto registrado con ese código");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "ERROR: " + dateFormat.getDateError());
                }
            }
        }
        this.listProjects();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        DateFormat dateFormat = new DateFormat();
        String title, startDate, endDate;
        int code;
        double cost;
        
        if("".equalsIgnoreCase(txtTitle.getText()) || "".equalsIgnoreCase(txtCode.getText()) ||
            jdcStartDate.getDate() == null || jdcEndDate.getDate() == null || "".equalsIgnoreCase(txtCost.getText())){
                JOptionPane.showMessageDialog(null, "Debe rellenar todos los campos obligatorios");
        } else {
            code = Integer.parseInt(txtCode.getText());
            title = txtTitle.getText();
            startDate = dateFormat.castDateToString(jdcStartDate.getDate());
            endDate = dateFormat.castDateToString(jdcEndDate.getDate());
            cost = Double.parseDouble(txtCost.getText());
            if(code <= 0) {
                JOptionPane.showMessageDialog(null, "El código del proyecto no puede ser menor a cero (0)");
            } else  {
                if(dateFormat.compareTwoDates(startDate, endDate)) {
                    Project objProject = new Project(code, title, startDate, endDate, cost);
                    ProjectController objProjectController = new ProjectController(objProject);
                    if(objProjectController.validateProject(code)) {
                        objProjectController.updateProject(code);
                        JOptionPane.showMessageDialog(null, "Proyecto actualizado exitosamente.");
                        txtCode.setText("");
                        txtTitle.setText("");
                        jdcStartDate.setDate(null);
                        jdcEndDate.setDate(null);
                        txtCost.setText("");
                    } else {
                        JOptionPane.showMessageDialog(null, "No se puede actualizar un proyecto que no ha sido creado");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "ERROR: " + dateFormat.getDateError());
                }
            }
        }
        this.listProjects();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int code;
        
        if("".equalsIgnoreCase(txtCode.getText())) {
            JOptionPane.showMessageDialog(null, "Debe copiar el código del proyecto que desea eliminar");
        } else {
            code = Integer.parseInt(txtCode.getText());
            if(code <= 0) {
                JOptionPane.showMessageDialog(null, "El código del proyecto no puede ser menor a cero (0)");
            } else {
                Project project = new Project(code, "", "", "", 0);
                ProjectController projectController = new ProjectController(project);
                if(projectController.validateProject(code)) {
                    projectController.deleteProject(code);
                    JOptionPane.showMessageDialog(null, "El proyecto con código " + code + " ha sido borrado exitosamente.");
                } else {
                    JOptionPane.showMessageDialog(null, "El proyecto con código " + code + " no existe.");
                }
            }
        }
        this.listProjects();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnConsultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultActionPerformed
        DateFormat dateFormat = new DateFormat();
        int code;
        
        if("".equalsIgnoreCase(txtCode.getText())) {
            JOptionPane.showMessageDialog(null, "Debe copiar el código del proyecto que desea consultar");
        } else {
            code = Integer.parseInt(txtCode.getText());
            if(code <= 0) {
                JOptionPane.showMessageDialog(null, "El código del proyecto no puede ser menor a cero (0)");
            } else {
                Project project = new Project(code, "", "", "", 0);
                ProjectController projectController = new ProjectController(project);
                if(projectController.validateProject(code)) {
                    String cost;
                    project = projectController.consultProject();
                    txtTitle.setText(project.getTitle());
                    jdcStartDate.setDate(dateFormat.stringToDate(project.getStartDate()));
                    jdcEndDate.setDate(dateFormat.stringToDate(project.getEndDate()));
                    cost = String.format("%.0f", project.getCost());
                    txtCost.setText(cost);
                } else {
                    JOptionPane.showMessageDialog(null, "El proyecto con código " + code + " no existe.");
                }
            }
        }
    }//GEN-LAST:event_btnConsultActionPerformed
    
    private void listProjects(){
        Project project = new Project(0, "", "", "", 0);
        ProjectController projectController = new ProjectController(project);
        String[][] matriz = projectController.consultAllProjects();
        
        Object objMat[][] = new String[matriz.length][5];
        String vecTit[] = new String[5];
        vecTit[0] = "Código";
        vecTit[1] = "Título";
        vecTit[2] = "Fecha Inicio";
        vecTit[3] = "Fecha Finalización";
        vecTit[4] = "Costo Proyecto";
        
        for(int i = 0; i < matriz.length; i++){
            objMat[i][0] = matriz[i][0];
            objMat[i][1] = matriz[i][1];
            objMat[i][2] = matriz[i][2];
            objMat[i][3] = matriz[i][3];
            objMat[i][4] = "$ " + matriz[i][4];
        }
        DefaultTableModel objModelo= new DefaultTableModel(objMat,vecTit);
        tblProjects.setModel(objModelo);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConsult;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JDateChooser jdcEndDate;
    private com.toedter.calendar.JDateChooser jdcStartDate;
    private javax.swing.JTable tblProjects;
    private javax.swing.JTextField txtCode;
    private javax.swing.JTextField txtCost;
    private javax.swing.JTextField txtTitle;
    // End of variables declaration//GEN-END:variables
}
